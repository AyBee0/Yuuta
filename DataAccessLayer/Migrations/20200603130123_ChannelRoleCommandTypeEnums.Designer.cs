// <auto-generated />
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(YuutaDbContext))]
    [Migration("20200603130123_ChannelRoleCommandTypeEnums")]
    partial class ChannelRoleCommandTypeEnums
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("DataAccessLayer.Models.ChannelModels.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChannelDid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChannelTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChannelId");

                    b.HasIndex("ChannelTypeId");

                    b.HasIndex("GuildId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ChannelModels.ChannelType", b =>
                {
                    b.Property<int>("ChannelTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChannelTypeId");

                    b.ToTable("ChannelTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Models.CommandModels.Command", b =>
                {
                    b.Property<int>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommandTrigger")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CommandTypeEnum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommandTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommandId");

                    b.HasIndex("CommandTypeId");

                    b.ToTable("Command");
                });

            modelBuilder.Entity("DataAccessLayer.Models.CommandModels.CommandRestrictionOverload", b =>
                {
                    b.Property<int>("RestrictionOverloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Authorize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleDid")
                        .HasColumnType("INTEGER");

                    b.HasKey("RestrictionOverloadId");

                    b.HasIndex("CommandId");

                    b.ToTable("CommandRestrictionOverloads");
                });

            modelBuilder.Entity("DataAccessLayer.Models.CommandModels.CommandType", b =>
                {
                    b.Property<int>("CommandTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CommandTypeId");

                    b.ToTable("CommandTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Models.GuildModels.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GuildMacroId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttachmentId");

                    b.HasIndex("GuildMacroId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("DataAccessLayer.Models.GuildModels.Guild", b =>
                {
                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GuildDid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuildName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LeaveMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("WelcomeMessage")
                        .HasColumnType("TEXT");

                    b.HasKey("GuildId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("DataAccessLayer.Models.GuildModels.GuildMacro", b =>
                {
                    b.Property<int>("GuildMacroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DeleteAfterSend")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GuildMacroId");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildMacro");
                });

            modelBuilder.Entity("DataAccessLayer.Models.RoleModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("RoleDid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.HasIndex("GuildId");

                    b.HasIndex("RoleTypeId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccessLayer.Models.RoleModels.RoleType", b =>
                {
                    b.Property<int>("RoleTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleTypeId");

                    b.ToTable("RoleTypes");

                    b.HasData(
                        new
                        {
                            RoleTypeId = 0,
                            Description = "Normal",
                            Name = "Normal"
                        },
                        new
                        {
                            RoleTypeId = 1,
                            Description = "Staff",
                            Name = "Staff"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.ChannelModels.Channel", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ChannelModels.ChannelType", "ChannelType")
                        .WithMany()
                        .HasForeignKey("ChannelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.GuildModels.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.CommandModels.Command", b =>
                {
                    b.HasOne("DataAccessLayer.Models.CommandModels.CommandType", "CommandType")
                        .WithMany()
                        .HasForeignKey("CommandTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.CommandModels.CommandRestrictionOverload", b =>
                {
                    b.HasOne("DataAccessLayer.Models.CommandModels.Command", "Command")
                        .WithMany("RestrictionOverloads")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.GuildModels.Attachment", b =>
                {
                    b.HasOne("DataAccessLayer.Models.GuildModels.GuildMacro", "GuildMacro")
                        .WithMany("Attachments")
                        .HasForeignKey("GuildMacroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.GuildModels.GuildMacro", b =>
                {
                    b.HasOne("DataAccessLayer.Models.GuildModels.Guild", "Guild")
                        .WithMany("GuildMacros")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.RoleModels.Role", b =>
                {
                    b.HasOne("DataAccessLayer.Models.GuildModels.Guild", "Guild")
                        .WithMany("Roles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.RoleModels.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
